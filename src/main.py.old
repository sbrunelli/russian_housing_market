import pandas as pd
import numpy as np
from data_cleaning import DataCleaner
from feature_engineering import Featurizer
from model_selection import ModelSelector
from datetime import datetime
from sklearn.model_selection import train_test_split

def now():
    return datetime.now().strftime("%Y%m%d_%H%M%S")

if __name__ == "__main__":
    # Turn off warnings
    pd.options.mode.chained_assignment = None

    # Read train data set
    train = pd.read_csv('data/train.csv')
    macro = pd.read_csv('data/macro.csv')
    train = train.merge(macro, how='left', on='timestamp', suffixes=('_train', '_macro'))

    # Clean
    dc = DataCleaner(data=train, sample_rate=0.3)
    X, y = dc.clean()
    y = np.array(y)

    # Train / test split
    X_train, X_test, y_train, y_test = train_test_split(X, y)

    # Featurize training data set
    feat_train = Featurizer()
    X_train = feat_train.featurize(X_train)

    # Grid search tune all estimators
    ms = ModelSelector()
    print ' # {:s} | X_train size: {:d}'.format(now(), X_train.shape[0])
    print ' # {:s} | X_test size: {:d}'.format(now(), X_test.shape[0])
    ms.grid_search_cv(X_train, y_train)

    # Retrain estimators with best parameters
    ms.retrain_with_best_params()

    # Featurize test data set
    feat_test = Featurizer()
    print ' # {:s} | y_train size: {:d}'.format(now(), y_train.shape[0])
    print ' # {:s} | y_test size: {:d}'.format(now(), y_test.shape[0])
    X_test = feat_test.featurize(X_test)

    # Score all estimators with best parameters against test data set
    ms.score_best_estimators(X_test, y_test)
    ms.report_score_best_estimators()

    # Select best estimator
    best_estimator = ms.get_best_estimator()

    # Train / test merge

    # Featurize train / test merge
    featurizer = Featurizer()
    X = featurizer.featurize(X)

    # Train best estimator against merged train / test
    best_estimator.fit(X, y)

    # Read Kaggle test set
    test = pd.read_csv('data/test.csv')
    test = test.merge(macro, how='left', on='timestamp', suffixes=('_train', '_macro'))

    # Featurize Kaggle test set
    dc_kaggle = DataCleaner(data=test, train_test='test')
    test = dc_kaggle.kaggle()
    feat_kaggle = Featurizer()
    X_kaggle = feat_kaggle.featurize(test)

    # Create prediction file to submit to Kaggle
    tmstmp = now()
    house_ids = feat_kaggle.get_house_ids()
    y_predicted = best_estimator.predict(X_kaggle)
    kaggle = pd.DataFrame({'id': house_ids, 'price_doc': y_predicted})
    kaggle.to_csv('predictions/predictions'+tmstmp+'.csv'
        , index=False)
